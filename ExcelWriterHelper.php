<?php
/**
 * Created by PhpStorm.
 * User: GuoZhaoXuan
 * Date: 2020/8/3 0003
 * Time: 14:51
 * PHP version 7
 *
 * @category Private
 * @package  Cronus
 * @author   GuoZhaoXuan <1175398345@qq.com>
 * @license  http://www.apache.org/licenses/LICENSE-2.0  Apache License 2.0
 * @link     http://www.beibiba.com bebiba
 **/

namespace app\common\components\excel;


use yii\base\BaseObject;
use \Vtiful\Kernel\Excel;
use \Vtiful\Kernel\Format;
use \Vtiful\Kernel\Resource;
use yii\helpers\FileHelper;


/**
 *
 *  基于  viest/php-ext-xlswriter 封装
 *
 * Class ExcelWriterHelper
 * @package app\common\components\excel
 */
class ExcelWriterHelper extends BaseObject
{


    # 对齐方式
    const   FORMAT_ALIGN_LEFT = Format::FORMAT_ALIGN_LEFT;                 // 水平左对齐
    const   FORMAT_ALIGN_CENTER = Format::FORMAT_ALIGN_CENTER;               // 水平剧中对齐
    const   FORMAT_ALIGN_RIGHT = Format::FORMAT_ALIGN_RIGHT;                // 水平右对齐
    const   FORMAT_ALIGN_FILL = Format::FORMAT_ALIGN_FILL;                 // 水平填充对齐
    const   FORMAT_ALIGN_JUSTIFY = Format::FORMAT_ALIGN_JUSTIFY;              // 水平两端对齐
    const   FORMAT_ALIGN_CENTER_ACROSS = Format::FORMAT_ALIGN_CENTER_ACROSS;        // 横向中心对齐
    const   FORMAT_ALIGN_DISTRIBUTED = Format::FORMAT_ALIGN_DISTRIBUTED;          // 分散对齐
    const   FORMAT_ALIGN_VERTICAL_TOP = Format::FORMAT_ALIGN_VERTICAL_TOP;         // 顶部垂直对齐
    const   FORMAT_ALIGN_VERTICAL_BOTTOM = Format::FORMAT_ALIGN_VERTICAL_BOTTOM;      // 底部垂直对齐
    const   FORMAT_ALIGN_VERTICAL_CENTER = Format::FORMAT_ALIGN_VERTICAL_CENTER;      // 垂直剧中对齐
    const   FORMAT_ALIGN_VERTICAL_JUSTIFY = Format::FORMAT_ALIGN_VERTICAL_JUSTIFY;     // 垂直两端对齐
    const   FORMAT_ALIGN_VERTICAL_DISTRIBUTED = Format::FORMAT_ALIGN_VERTICAL_DISTRIBUTED; // 垂直分散对齐

    # 颜色常量
    const COLOR_BLACK = Format::COLOR_BLACK;
    const COLOR_BLUE = Format::COLOR_BLUE;
    const COLOR_BROWN = Format::COLOR_BROWN;
    const COLOR_CYAN = Format::COLOR_CYAN;
    const COLOR_GRAY = Format::COLOR_GRAY;
    const COLOR_GREEN = Format::COLOR_GREEN;
    const COLOR_LIME = Format::COLOR_LIME;
    const COLOR_MAGENTA = Format::COLOR_MAGENTA;
    const COLOR_NAVY = Format::COLOR_NAVY;
    const COLOR_ORANGE = Format::COLOR_ORANGE;
    const COLOR_PINK = Format::COLOR_PINK;
    const COLOR_PURPLE = Format::COLOR_PURPLE;
    const COLOR_RED = Format::COLOR_RED;
    const COLOR_SILVER = Format::COLOR_SILVER;
    const COLOR_WHITE = Format::COLOR_WHITE;
    const COLOR_YELLOW = Format::COLOR_YELLOW;

    # 网格线
    const GRIDLINES_HIDE_ALL    = 0; // 隐藏 屏幕网格线 和 打印网格线
    const GRIDLINES_SHOW_SCREEN = 1; // 显示屏幕网格线
    const GRIDLINES_SHOW_PRINT  = 2; // 显示打印网格线
    const GRIDLINES_SHOW_ALL    = 3; // 显示 屏幕网格线 和 打印网格线


    public $expireTime = 3600 * 24;

    /**
     * 下载对应文件地址
     *
     * @var string
     */
    public $excelDownUrl = "/common/excel-down";
    /**
     * excel文件临时存放目录(相对于项目根目录)
     *
     * @var string
     */
    public $temDir = "/uploads/excel_tmp";


    private $token = '';

    public $defaultConfig = [

    ];

    public function init()
    {
        # 设置常量

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @var self|null
     */
    private static $selfObj = null;

    /**
     * 单例
     * @return ExcelWriterHelper|null
     */
    public static function instance()
    {
        if (!self::$selfObj instanceof self) {
            self::$selfObj = new self();
        }
        return self::$selfObj;
    }

    /**
     * 导出excel
     *
     * @param array  $sheets
     *     `
     *          [
     *              [
     *                  'sheet_name'=>'页码名称',
     *                  'sheet_header'=>'页头信息(支持多级)',// 参考setHeader
     *                  'default_format'=>function($fileObj,&$format,$endCol){
     *                      # $fileObj sheet操作对象,$format 全局样式 , endCol 最大列下标
     *
     *
     *                  }
     *                  ,data_fun:function($params){ //  数据： callback | array
     *
     *                      # $params => ['limit'=>1,'offset'=>1]  设置 data_count 时提供
     *
     *
     *                  }
     *                  ,data_count:function(){  //    数据总数量: integer| callback
     *
     *                      return 2;
     *                   }
     *
     *
     *              ]
     *          ]
     *
     *
     * @param string $filePath   导出文件地址（未提供，则导入到临时文件）
     * @param int    $pageSize   分页导出时，一页导出数量
     *
     * @throws \yii\base\Exception
     * @return bool
     */

    public function exportExcel(Array $sheets, $filePath = "", $pageSize = 5000)
    {
        # 创建对应临时文件
        if (!$filePath = $this->createFile($filePath)) {
            return false;
        }
        $excel = new \Vtiful\Kernel\Excel(array_merge($this->defaultConfig, [
            'path' => dirname($filePath),
        ]));
        $fileObject = null;

        $pageSize = $pageSize ? $pageSize : 5000;

        foreach ($sheets as $k => $sheet) {
            $sheetName = $sheet['sheet_name'];
            $sheetHeader = $sheet['sheet_header'];
            $dataFun = $sheet['data_fun'] ?? [];
            $dataCount = $sheet['data_count'] ?? false;
            $defaultFormat=$sheet['default_format']??null; // 全局默认单元格样式

            if(is_callable($dataCount)){
                $totalCount=$dataCount();
            }else{
                $totalCount=$dataCount;
            }

            if (!$k) {
                $fileObject = $excel->fileName(basename($filePath), $sheetName);
            } else {
                $fileObject->addSheet($sheetName);
            }

            # 设置头
            $endColIndex=-1;
            $this->setHeader($sheetHeader, $fileObject, $maxRow, $dataHeaders,1,$endColIndex);

            $format = new Format($fileObject->getHandle());
            # 设置全局样式
            if($defaultFormat){
                $defaultFormat($fileObject,$format,$endColIndex);
                $style = $format->toResource();
                $fileObject->defaultFormat($style);
            }

            # 获取列的位置
            $keysIndex = array_flip(array_column($dataHeaders, 'key'));
            $headData = array_pad([], $maxRow, []);
            $fileObject->data($headData);

            # 设置数据
            $pageCount = 1;
            if (is_callable($dataFun) && $totalCount) {
                $pageCount = ceil($totalCount / $pageSize);
            }
            # 分批次导入
            for ($page = 1; $page <= $pageCount; $page++) {
                $params['limit'] = $pageSize;
                $params['offset'] = ($page - 1) * $pageSize;
                if (is_callable($dataFun)) {
                    $data = call_user_func($dataFun, $params);
                } else {
                    $data = $dataFun;
                }

                # 数据格式化
                foreach ($data as $k => &$v) {
                    $newVal = [];
                    foreach ($dataHeaders as $colIndex => $head) {

                        # 执行模板回调
                        if (is_callable($head['templet'])) {
                            $newVal[$head['key']] = call_user_func_array($head['templet'], [
                                # sheet操作对象
                                'fileObject' => $fileObject,
                                'key' => $head['key'],
                                # 行数据
                                'row' => $v,
                                # 行索引
                                'rowIndex' => $params['offset'] + $k,
                                # 列索引
                                'colIndex' => $keysIndex[$head['key']],
                                # 列信息(类型、key)
                                'colIndexStr' => ExcelWriterHelper::stringFromColumnIndex($keysIndex[$head['key']]),
                            ]);
                        } else {
                            $newVal[$head['key']] = $v[$head['key']] ?? '';
                        }
                        # 设置数据类型
                        if ($head['type']) {
                            if ($head['type'] == 'string') {

                            } else if ($head['type'] == 'number') {


                            }

                        }


                    }
                    # 插入数据
                    $fileObject->data([array_values($newVal)]);
                }
            }
        }

        $rs = $fileObject->output();
        return $rs ? true : false;

    }


    public function importExcel()
    {


    }


    /**
     * 设置头部(支持多级)
     *
     * @param array                $headers 头参数
     *    `
     *      [
     *           [
     *               "title"=>"名称",
     *               "type"=>"string",
     *               "key"=>"name",
     *               "style"=>function ($excelObj, &$format) { // 当前head 单元格样式
     *
     *                },
     *               # 列数据格式化 (提供key时)
     *              "templet" => function ($fileObject, $key, $row, $rowIndex, $colIndex, $colIndexStr) {
     *                    return (float)$row[$key];
     *               },
     *
     *               rowspan=>2, // 跨行数
     *               colspan=2,  // 跨列数
     *                # 子级
     *               "children"=>[
     *
     *              ],
     *      ];
     *    `
     *
     * @param \Vtiful\Kernel\Excel $fileObject 操作对象
     * @param int                  $maxRow 头部占用行数
     * @param array                $dataHeaders 数据字段信息（包含 key ）
     * @param int                  $rowIndex 当前行
     * @param int                  $endColIndex 当前结束列
     *
     * @return  bool
     */
    public function setHeader(Array $headers, $fileObject, &$maxRow = 1, &$dataHeaders = [], $rowIndex = 1, &$endColIndex = -1)
    {
        foreach ($headers as $head) {
            # 设置默认参数
            $head = array_merge([
                "title" => "",
                "type" => "string",
                "key" => "",
                "style" => function ($excelObj, &$format) {
                    return $format;
                },
                "width"=>0,// 宽度
                "children" => [],
                "colspan" => 1,
                "rowspan" => 1,
            ], $head);


            # 设置数据 key/类型 （排序位置）
            if ($head['key']) {
                $dataHeaders[] = [
                    'key' => $head['key'],
                    'type' => $head['type'],
                    'templet' => $head['templet'] ?? null,
                ];
            }

            # 列位置：起始-结束
            $startColIndex = $endColIndex + 1;
            $endColIndex = $startColIndex + $head['colspan'] - 1;

            $startCol = ExcelWriterHelper::stringFromColumnIndex($startColIndex);
            $endCol = ExcelWriterHelper::stringFromColumnIndex($endColIndex);

            # 设置列宽
            if($head['width']){
                $fileObject->setColumn("{$startCol}:{$endCol}", $head['width']);
            }

            # 行位置：起始-结束
            $startRow = $rowIndex;
            $endRow = $startRow + $head['rowspan'] - 1;
            if ($endRow > $maxRow) {
                $maxRow = $endRow;
            }
            $format = new Format($fileObject->getHandle());

            # 默认文本居中
            $format = $format->align(Format::FORMAT_ALIGN_CENTER, Format::FORMAT_ALIGN_VERTICAL_CENTER);
            if (isset($head['style']) && is_callable($head['style'])) {
                $head['style']($fileObject, $format);
            }
            $style = $format->toResource();

            # 合并行 A1:B3
            $fileObject->mergeCells("{$startCol}{$startRow}:{$endCol}{$endRow}", $head['title'], $style);

            # 子级
            if (isset($head['children']) && $head['children']) {
                $endColIndex=$startColIndex - 1;
                $this->setHeader($head['children'], $fileObject, $maxRow, $dataHeaders, $rowIndex + $head['rowspan'],$endColIndex );
            }
        }
        return true;
    }


    /**
     * 列标字符转化（下标转字符）
     *
     * @param $index
     *
     * @return string|mixed
     */
    public static function stringFromColumnIndex($index)
    {
        return \Vtiful\Kernel\Excel::stringFromColumnIndex($index);
    }

    /**
     * 列标字符转化（字符转下标）
     *
     * @param $strIndex
     *
     * @return integer|mixed
     */
    public static function columnIndexFromString($strIndex)
    {
        return \Vtiful\Kernel\Excel::columnIndexFromString($strIndex);
    }

    /**
     * 创建文件（临时）
     *
     * @param $filePath  未传则临时文件
     *
     * @throws \yii\base\Exception
     * @return bool|string
     */
    public function createFile($filePath)
    {

        $isTmp = false;
        if (!$filePath) {
            $isTmp = true;
            $filePath = $this->getTmpfile();
        }
        if (!$filePath) {
            return $this->setError('文件地址不能为空~');
        }

        if ($isTmp) {
            $this->token = substr($filePath, strlen($this->getTmpDir()) + 1);
        } else {
            # 非临时文件将不返回token
            if (!is_file($filePath)) {
                # 创建目录
                $dirname = dirname($filePath);
                if (!is_dir($dirname)) {
                    FileHelper::createDirectory($dirname, 0775, true);
                }
                if (!is_dir($dirname)) {
                    return $this->setError('创建目录失败~');
                }
                # 创建一个空文件
                if (!$handle = fopen($filePath, 'w')) {
                    return $this->setError('创建文件失败~');
                } else {
                    fclose($handle);
                }
            }
        }
        return $filePath;
    }


    private $errors = [];

    /**
     * 设置错误信息
     *
     * @param $message
     *
     * @return bool
     */
    public function setError($message)
    {
        $this->errors[] = $message;
        return false;
    }

    /**
     * 获取错误信息
     *
     * @return array
     */
    public function getError()
    {
        return $this->errors;
    }

    /**
     * 获取第一个错误信息
     *
     * @return mixed
     */
    public function getFirstError()
    {
        return current($this->errors);
    }

    /**
     * 删除已经失效的生成的excel文件临时文件
     *
     * @return array 返回删除成功的文件名集合
     */
    public function delFileByExpire()
    {
        $cTime = time();
        $tempDir = $this->getTmpDir();
        # 删除临时目录下生成的失效excel
        $files = scandir($tempDir);
        $files = array_filter(array_map(function ($file) use ($tempDir, $cTime) {
            $full_path = $tempDir . "/" . $file;
            if (!in_array($file, [".", ".."]) && !is_dir($full_path)) {
                $fileCtime = filectime($full_path);
                if ($fileCtime && ($cTime - $fileCtime >= $this->expireTime)) {
                    if (@unlink($full_path)) {
                        return $file;
                    }
                }
            }
        }, $files));

        return $files;
    }

    /**
     * 根据token获取extension
     *
     * @param $token
     *
     * @return mixed
     */
    public function getExtensionByToken($token)
    {
        list($extension, $filename) = explode('_', $token);

        return $extension;
    }

    /**
     * @param      $showFilename  显示文件名
     * @param      $tmpFilename   对应文件路径（全路径/token）
     * @param bool $isDel 是否下载完删除对应文件
     * @param null $extension 设置下载拓展名(token时自动根据名字获取,全路径可指定(xlsx/csv))
     *
     * @return int
     */
    public function downExcel($showFilename, $tmpFilename, $isDel = true, $extension = null)
    {
        # 删除已经失效的文件
        $this->delFileByExpire();
        ob_end_clean();

        if (!is_file($tmpFilename)) {
            $extension = $this->getExtensionByToken($tmpFilename);
            $path = $this->getPathByToken($tmpFilename);
        } else {
            $path = $tmpFilename;
        }
        if (!file_exists($path)) {
            return 1002;
        }

        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-excel");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");
        header('Content-Disposition:attachment;filename=' . $showFilename . '.' . ($extension ?? 'xlsx'));
        header("Content-Transfer-Encoding:binary");

        /*        $fp = fopen($path, 'rb');
                if ($fp) {
                    if (!fpassthru($fp)) {
                        return 1004;
                    }
                }
                @unlink($path);*/
        # 读取文件
        if (!readfile($path)) {
            if ($isDel) {
                @unlink($path);
            }

            return 1004;
        }
        # 删除文件
        if ($isDel) {
            @unlink($path);
        }
        exit();
    }

    /**
     * 根据参数 token 获取文件地址
     *
     * @param $fileName
     * @param $token
     *
     * @throws \Exception
     * @return string
     */
    public function getUrl($fileName, $token = '')
    {
        $token = !$token ? $this->token : '';
        if (!$token) {
            throw new \Exception("非临时目录时将不返回url,请自行根据自定义路径拼接");
        }
        return $this->excelDownUrl . "?filename={$fileName}&token={$token}";
    }

    /**
     * 在指定目录申请一个临时文件
     *
     * @param null   $tmpDir 指定目录
     * @param string $extension 拓展名标识(xlsx/csv)
     *
     * @return bool|string
     */
    public function getTmpfile($tmpDir = null, $extension = 'xlsx')
    {
        if (!$tmpDir) {
            $tmpDir = $this->getTmpDir();
        }
        $tmpPath = tempnam($tmpDir, '');
        $baseName = basename($tmpPath);
        $filePath = $tmpDir . '/' . $extension . '_' . $baseName;
        rename($tmpPath, $filePath);

        return $filePath;
    }

    /**
     * 获取系统临时目录
     *
     * @return string
     */
    public function getTmpDir()
    {
        # 根目录申请一个临时目录
        $dir = \Yii::getAlias("@webroot") . $this->temDir;
        if (!is_dir($dir)) {
            mkdir($dir, 0755, true);
        }

        return $dir;

        //  return sys_get_temp_dir();
    }

    /**
     * 根据token 获取完整地址
     *
     * @param $token
     *
     * @return string
     */
    public function getPathByToken($token)
    {
        return $this->getTmpDir() . '/' . $token;
    }

}
